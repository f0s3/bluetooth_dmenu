#!/bin/bash

# bluetoothctl_dmenu - dmenu-driven application that simplifies
# the bluetooth connection through the bluetoothctl.

# This application uses (or at least leads to) the MVC pattern.

# Flow:

# When a person clicks on a View which goes to the Model that tells
# a Controller to get the information for the View that requested it,
# a Controller takes the responsibility of getting what was asked and
# pulling it back to the requesting Model that transforms raw data from 
# Model to only what was asked by View.
# This way View only shows things to user, Model mediates the data and
# manages it in the way, appropriate for whom it was sent.
# Controller does the heavy lifting of communicating with the backend
# and provides an API to whom it is needed.
# In some cases, if the data returned by Controller is fine for View
# and Controller is ok with the data, provided by View, the Model could
# be emitted.

dmenu_list_mode="-l 10"
backend="bluetoothctl"
connected_device=""
unpaired_devices=""

previous_menu="main"
current_menu="main"

#########################################################################
#							CONTROLLERS									#
#########################################################################


# TODO: Refactor the code and split it into MVC


#########################################################################
#								MODELS									#
#########################################################################


# TODO: Refactor the code and split it into MVC


#########################################################################
#								VIEWS									#
#########################################################################


# TODO: Refactor the code and split it into MVC


#check whether bluetoothctl is installed and is working correctly
is_bluetoothctl_installed_correctly() {
	if [[ $($backend -v) == bluetoothctl* &&
	$($backend power on) == "Changing power on succeeded" &&
	$($backend list) == Controller* ]]; then
		echo $backend 'is installed and configured correctly'
	fi
}

get_already_paired_devices() {
	IFS=
	echo $($backend paired-devices);
}

print_connected_devices() {
	while read -r _ mac name; do
		if [[ $($backend info $mac | grep "Connected: yes") ]]; then
			printf '%-40s%s\n' "$name" "$mac"
		fi
	done < <(get_already_paired_devices)
}

get_unpaired_devices() {
	unpaired_devices=""
	while read -r _ mac name; do
	 	if [[ $($backend info $mac | grep "Paired: no") ]]; then
	 		unpaired_devices+="$name | $mac\n"
	 	fi
	done < <($backend devices) 
}

# $1-text; $2-var name
dmenu_notify() {
	: | dmenu -p "$1"
}

print_paired_devices() {
	while read -r _ mac name; do
		printf '%-40s%s\n' "$name" "$mac"
	done < <(get_already_paired_devices)
}

connect_device() {
	$backend connect $2 && (
	echo $2 '(connected)';
	$connected_device="hello"
	);
	echo $connected_device;
}

btctl_command() {
	local command=$1
	local mac=$2
	local name=$3

	local status
	status="$($backend $command $mac)"
	printf "$status\n"
	if [[ $(echo "$status" | grep -i "successful\|succeeded\|removed") ]]; then
		dmenu_notify "$name: Successful operation '$command' (press enter)"
	elif [[ $(echo "$status" | grep -i "failed") ]]; then
		dmenu_notify "$name: Failed operation '$command' (press enter)"
	fi
}

disconnect_all_devices() {
	$($backend disconnect);
}

create_options() {
	local device_info

	if [[ $($backend info $mac | grep "$1") ]]; then
		submenu_options+="$2 "
	else
		submenu_options+="$3 "
	fi
}

open_device_submenu() {
	local submenu_options
	local name
	local mac
	local option
	submenu_options=""
	name=$(echo "$1" | cut -d "|" -f 1)
	mac=$(echo "$1" | cut -d "|" -f 2)

	create_options "Connected: yes" "disconnect" "connect" 
	create_options "Trusted: yes" "untrust" "trust"
	create_options "Blocked: yes" "unblock" "block"
	create_options "Paired: yes" "remove" "pair"

	read -r connect trust block pair < <(echo "$submenu_options")
	option=$(printf "%s\n" $connect $trust $block $pair | dmenu -p "$name")
	[[ $option ]] || exit 1

	btctl_command $option $mac "$name"
}

get_main_menu() {
	echo -e "Show connected devices\nShow paired devices\nScan for devices"
}

function finish {
	if [[ "$previous_menu" == "main" ]]; then
		open_main_menu
	fi
}

trap finish EXIT

open_main_menu() {
	local submenu
	local device
	submenu=$(get_main_menu | dmenu)
	[[ $submenu ]] || exit 1

	if [[ $submenu == "Show connected connected" ]]; then
		previous_menu="main"
		current_menu="main_connected"
		device=$(print_connected_devices | dmenu -p "Connected devices" $dmenu_list_mode)
		[[ $device ]] || exit 1
		open_device_submenu "$device"
	elif [[ $submenu == "Show paired devices" ]]; then
		previous_menu="main"
		current_menu="main_paired"
		device=$(print_paired_devices | dmenu -p "Paired devices" $dmenu_list_mode)
		[[ $device ]] || exit 1
		open_device_submenu "$device"
	elif [[ $submenu == "Scan for devices" ]]; then
		previous_menu="main"
		current_menu="main_scan"
		$backend scan on > /dev/null &

		while [[ "1" == "1" ]]; do
			get_unpaired_devices
			device=$(printf "update\n$unpaired_devices" | dmenu -p "scan" $dmenu_list_mode)

			if [[ -z $device ]]; then
				pkill -P $$
				break
			elif [[ $device == "update" ]]; then
				continue
			else 
				open_device_submenu "$device"
				pkill -P $$
				break
			fi 
		done
	fi
}

is_bluetoothctl_installed_correctly
open_main_menu

