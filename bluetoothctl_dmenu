#!/bin/bash
dmenu_list_mode="-l 10"
backend="bluetoothctl"
connected_device=""
unpaired_devices=""
is_scan_running="false"

#check whether bluetoothctl is installed and is working correctly
is_bluetoothctl_installed_correctly() {
	if [[ $($backend -v) == bluetoothctl* &&
	$($backend power on) == "Changing power on succeeded" &&
	$($backend list) == Controller* ]]; then
		echo $backend 'is installed and configured correctly'
	fi
}

get_already_paired_devices() {
	IFS=
	echo $($backend paired-devices);
}

print_connected_devices() {
	while read -r _ mac name; do
		if [[ $($backend info $mac | grep "Connected: yes") ]]; then
			printf '%-40s%s\n' "$name" "$mac"
		fi
	done < <(get_already_paired_devices)
}

get_unpaired_devices() {
	unpaired_devices=""
	while read -r _ mac name; do
	 	if [[ $($backend info $mac | grep "Paired: no") ]]; then
	 		unpaired_devices+="$name | $mac\n"
	 	fi
	done < <($backend devices) 
}

# $1-text; $2-var name
dmenu_notify() {
	: | dmenu -p "$1"
}

print_paired_devices() {
	while read -r _ mac name; do
		printf '%-40s%s\n' "$name" "$mac"
	done < <(get_already_paired_devices)
}

connect_device() {
	$backend connect $2 && (
	echo $2 '(connected)';
	$connected_device="hello"
	);
	echo $connected_device;
}

# $1-command; $2-mac; $3-name
btctl_command() {
	local status
	status="$($backend $1 $2)"
	printf "$status\n"
	if [[ $(echo "$status" | grep -i "successful\|succeeded\|removed") ]]; then
		dmenu_notify "$3: Successful operation '$1' (press enter)"
	elif [[ $(echo "$status" | grep -i "failed") ]]; then
		dmenu_notify "$3: Failed operation '$1' (press enter)"
	fi
}

disconnect_all_devices() {
	$($backend disconnect);
}

create_options() {
	local device_info

	if [[ $($backend info $mac | grep "$1") ]]; then
		submenu_options+="$2 "
	else
		submenu_options+="$3 "
	fi
}

open_device_submenu() {
	local submenu_options=""
	local name=$(echo "$1" | cut -d "|" -f 1)
	local mac=$(echo "$1" | cut -d "|" -f 2)
	local option
	previous_menu=$2
	current_menu="$2_submenu"
	echo "Previous menu: $previous_menu, current menu: $current_menu"

	create_options "Connected: yes" "disconnect" "connect" 
	create_options "Trusted: yes" "untrust" "trust"
	create_options "Blocked: yes" "unblock" "block"
	create_options "Paired: yes" "remove" "pair"

	read -r connect trust block pair < <(echo "$submenu_options")
	option=$(printf "%s\n" $connect $trust $block $pair | dmenu -p "$name")
	if [[ -z $option ]]; then
		finish
		return
	fi

	btctl_command $option $mac "$name"
	finish
}

open_connected_devices_menu() {
	previous_menu="main"
	current_menu="main_connected"
	echo "Previous menu: $previous_menu, current menu: $current_menu"
	device=$(print_connected_devices | dmenu -p "Connected devices" $dmenu_list_mode)
	if [[ -z $device ]]; then
		finish
		return
	fi
	open_device_submenu "$device" "$current_menu"
}

open_paired_devices_menu() {
	previous_menu="main"
	current_menu="main_paired"
	echo "Previous menu: $previous_menu, current menu: $current_menu"
	device=$(print_paired_devices | dmenu -p "Paired devices" $dmenu_list_mode)
	if [[ -z $device ]]; then
		finish
		return
	fi
	open_device_submenu "$device" "$current_menu"
}

open_scan_devices_menu() {
	previous_menu="main"
	current_menu="main_scan"

	echo "Previous menu: $previous_menu, current menu: $current_menu"
	$backend scan on > /dev/null &

	while : ; do
		get_unpaired_devices
		device=$(printf "update\n$unpaired_devices" | dmenu -p "scan" $dmenu_list_mode)

		if [[ -z $device ]]; then
			break
		elif [[ ! $device == "update" ]]; then
			open_device_submenu "$device" "$current_menu"
			previous_menu="main"
			current_menu="main_scan"
		fi
	done

	pkill -P $$
	finish
}

get_main_menu() {
	echo -e "Show connected devices\nShow paired devices\nScan for devices"
}

function finish {
	if [[ "$current_menu" == "main" ]]; then
		exit 1
	fi

	if [[ "$previous_menu" == "main" ]]; then
		open_main_menu
	elif [[ "$previous_menu" == "main_connected" ]]; then
		open_connected_devices_menu
	elif [[ "$previous_menu" == "main_paired" ]]; then
		open_paired_devices_menu
	elif [[ "$previous_menu" == "main_scan" ]]; then
		return
	fi
}

open_main_menu() {
	local submenu

	previous_menu="main"
	current_menu="main"

	echo "Previous menu: $previous_menu, current menu: $current_menu"

	submenu=$(get_main_menu | dmenu)

	if [[ $submenu == "Show connected devices" ]]; then
		open_connected_devices_menu
	elif [[ $submenu == "Show paired devices" ]]; then
		open_paired_devices_menu
	elif [[ $submenu == "Scan for devices" ]]; then
		open_scan_devices_menu
	fi
}

is_bluetoothctl_installed_correctly
open_main_menu